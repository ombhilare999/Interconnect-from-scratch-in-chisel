;buildInfoPackage: chisel3, version: 3.3.1, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit Top : 
  module Transmitter : 
    input clock : Clock
    input reset : Reset
    output io : {flip START : UInt<1>, WR : UInt<1>, RD : UInt<1>, ADD : UInt<32>, WDATA : UInt<32>, flip RDATA : UInt<32>}
    
    reg r_start : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[fsm_comm.scala 26:30]
    reg r_wr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[fsm_comm.scala 27:30]
    reg r_rd : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[fsm_comm.scala 28:30]
    reg r_add : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[fsm_comm.scala 29:30]
    reg r_wdata : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[fsm_comm.scala 30:30]
    reg r_rdata : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[fsm_comm.scala 31:30]
    reg state : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[fsm_comm.scala 37:28]
    node _T = asUInt(UInt<1>("h00")) @[Conditional.scala 37:23]
    node _T_1 = asUInt(state) @[Conditional.scala 37:39]
    node _T_2 = eq(_T, _T_1) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      node _T_3 = eq(r_start, UInt<1>("h01")) @[fsm_comm.scala 41:30]
      when _T_3 : @[fsm_comm.scala 41:39]
        state <= UInt<1>("h01") @[fsm_comm.scala 42:27]
        skip @[fsm_comm.scala 41:39]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = asUInt(UInt<1>("h01")) @[Conditional.scala 37:23]
      node _T_5 = asUInt(state) @[Conditional.scala 37:39]
      node _T_6 = eq(_T_4, _T_5) @[Conditional.scala 37:30]
      when _T_6 : @[Conditional.scala 39:67]
        r_wr <= UInt<1>("h01") @[fsm_comm.scala 46:22]
        r_rd <= UInt<1>("h00") @[fsm_comm.scala 47:22]
        r_add <= UInt<4>("h0a") @[fsm_comm.scala 48:23]
        r_wdata <= UInt<5>("h014") @[fsm_comm.scala 49:25]
        state <= UInt<2>("h02") @[fsm_comm.scala 50:23]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = asUInt(UInt<2>("h03")) @[Conditional.scala 37:23]
        node _T_8 = asUInt(state) @[Conditional.scala 37:39]
        node _T_9 = eq(_T_7, _T_8) @[Conditional.scala 37:30]
        when _T_9 : @[Conditional.scala 39:67]
          r_wr <= UInt<1>("h00") @[fsm_comm.scala 53:22]
          r_rd <= UInt<1>("h00") @[fsm_comm.scala 54:22]
          r_add <= UInt<1>("h00") @[fsm_comm.scala 55:23]
          r_wdata <= UInt<1>("h00") @[fsm_comm.scala 56:25]
          state <= UInt<1>("h00") @[fsm_comm.scala 57:23]
          skip @[Conditional.scala 39:67]
    r_start <= io.START @[fsm_comm.scala 61:17]
    io.WR <= r_wr @[fsm_comm.scala 62:15]
    io.RD <= r_rd @[fsm_comm.scala 63:15]
    io.ADD <= r_add @[fsm_comm.scala 64:16]
    io.WDATA <= r_wdata @[fsm_comm.scala 65:18]
    r_rdata <= io.RDATA @[fsm_comm.scala 66:17]
    
  module Receiver : 
    input clock : Clock
    input reset : Reset
    output io : {flip WR : UInt<1>, flip RD : UInt<1>, flip ADD : UInt<32>, flip WDATA : UInt<32>, RDATA : UInt<32>, CDATA : UInt<32>}
    
    reg r_wr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[fsm_comm.scala 82:30]
    reg r_rd : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[fsm_comm.scala 83:30]
    reg r_add : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[fsm_comm.scala 84:30]
    reg r_wdata : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[fsm_comm.scala 85:30]
    reg r_rdata : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[fsm_comm.scala 86:30]
    reg r_cdata : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[fsm_comm.scala 87:30]
    reg state : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[fsm_comm.scala 94:28]
    node _T = asUInt(UInt<1>("h00")) @[Conditional.scala 37:23]
    node _T_1 = asUInt(state) @[Conditional.scala 37:39]
    node _T_2 = eq(_T, _T_1) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      node _T_3 = eq(r_wr, UInt<1>("h01")) @[fsm_comm.scala 98:27]
      when _T_3 : @[fsm_comm.scala 98:36]
        state <= UInt<1>("h01") @[fsm_comm.scala 99:27]
        r_rdata <= UInt<1>("h00") @[fsm_comm.scala 100:29]
        skip @[fsm_comm.scala 98:36]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = asUInt(UInt<1>("h01")) @[Conditional.scala 37:23]
      node _T_5 = asUInt(state) @[Conditional.scala 37:39]
      node _T_6 = eq(_T_4, _T_5) @[Conditional.scala 37:30]
      when _T_6 : @[Conditional.scala 39:67]
        node _T_7 = eq(r_wr, UInt<1>("h01")) @[fsm_comm.scala 104:27]
        when _T_7 : @[fsm_comm.scala 104:36]
          node _T_8 = eq(r_add, UInt<4>("h0a")) @[fsm_comm.scala 105:32]
          when _T_8 : @[fsm_comm.scala 105:42]
            r_cdata <= r_wdata @[fsm_comm.scala 106:29]
            state <= UInt<2>("h02") @[fsm_comm.scala 107:27]
            skip @[fsm_comm.scala 105:42]
          skip @[fsm_comm.scala 104:36]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_9 = asUInt(UInt<2>("h02")) @[Conditional.scala 37:23]
        node _T_10 = asUInt(state) @[Conditional.scala 37:39]
        node _T_11 = eq(_T_9, _T_10) @[Conditional.scala 37:30]
        when _T_11 : @[Conditional.scala 39:67]
          node _T_12 = eq(r_wr, UInt<1>("h01")) @[fsm_comm.scala 112:27]
          when _T_12 : @[fsm_comm.scala 112:36]
            node _T_13 = eq(r_add, UInt<4>("h0b")) @[fsm_comm.scala 113:32]
            when _T_13 : @[fsm_comm.scala 113:42]
              r_cdata <= r_wdata @[fsm_comm.scala 114:29]
              state <= UInt<2>("h03") @[fsm_comm.scala 115:27]
              skip @[fsm_comm.scala 113:42]
            skip @[fsm_comm.scala 112:36]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_14 = asUInt(UInt<2>("h03")) @[Conditional.scala 37:23]
          node _T_15 = asUInt(state) @[Conditional.scala 37:39]
          node _T_16 = eq(_T_14, _T_15) @[Conditional.scala 37:30]
          when _T_16 : @[Conditional.scala 39:67]
            r_cdata <= UInt<1>("h00") @[fsm_comm.scala 120:25]
            skip @[Conditional.scala 39:67]
    r_wr <= io.WR @[fsm_comm.scala 124:14]
    r_rd <= io.RD @[fsm_comm.scala 125:14]
    r_add <= io.ADD @[fsm_comm.scala 126:15]
    r_wdata <= io.WDATA @[fsm_comm.scala 127:17]
    io.RDATA <= r_rdata @[fsm_comm.scala 128:18]
    io.CDATA <= r_cdata @[fsm_comm.scala 129:18]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip start : UInt<0>, cdata_check : UInt<32>}
    
    inst Tx of Transmitter @[fsm_comm.scala 141:24]
    Tx.clock <= clock
    Tx.reset <= reset
    inst Rx of Receiver @[fsm_comm.scala 142:24]
    Rx.clock <= clock
    Rx.reset <= reset
    Rx.io.WR <= Tx.io.WR @[fsm_comm.scala 146:18]
    Rx.io.RD <= Tx.io.RD @[fsm_comm.scala 147:18]
    Rx.io.ADD <= Tx.io.ADD @[fsm_comm.scala 148:19]
    Rx.io.WDATA <= Tx.io.WDATA @[fsm_comm.scala 149:21]
    Tx.io.RDATA <= Rx.io.RDATA @[fsm_comm.scala 150:21]
    Tx.io.START <= io.start @[fsm_comm.scala 151:21]
    io.cdata_check <= Rx.io.CDATA @[fsm_comm.scala 154:24]
    
