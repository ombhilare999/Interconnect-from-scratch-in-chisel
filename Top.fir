;buildInfoPackage: chisel3, version: 3.3.1, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit Top : 
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip TOP_WR : UInt<1>, flip TOP_RD : UInt<1>, flip TOP_ADDRESS : UInt<6>, flip TOP_WDATA : UInt<32>, TOP_RDATA : UInt<32>, flip TOP_LENGTH : UInt<6>, flip TOP_BURST : UInt<2>, flip TOP_SIZE : UInt<3>, AW_BURST : UInt<2>, AW_ADDR : UInt<6>, AW_LEN : UInt<8>, AW_SIZE : UInt<3>, AW_ID : UInt<1>, flip AW_READY : UInt<1>, AW_VALID : UInt<1>, AW_PROT : UInt<3>, W_DATA : UInt<32>, W_LAST : UInt<1>, W_STRB : UInt<4>, flip W_READY : UInt<1>, W_VALID : UInt<1>, flip B_ID : UInt<1>, flip B_RESP : UInt<2>, B_READY : UInt<1>, flip B_VALID : UInt<1>, AR_BURST : UInt<2>, AR_ADDR : UInt<6>, AR_LEN : UInt<8>, AR_SIZE : UInt<3>, AR_ID : UInt<1>, flip AR_READY : UInt<1>, AR_VALID : UInt<1>, AR_PROT : UInt<3>, flip R_DATA : UInt<32>, flip R_LAST : UInt<1>, flip R_ID : UInt<1>, flip R_RESP : UInt<2>, R_READY : UInt<1>, flip R_VALID : UInt<1>}
    
    reg r_AW_BURST : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Main.scala 66:33]
    reg r_AW_ADDR : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[Main.scala 67:33]
    reg r_AW_LEN : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Main.scala 68:33]
    reg r_AW_SIZE : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Main.scala 69:33]
    reg r_AW_ID : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Main.scala 70:33]
    reg r_AW_VALID : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Main.scala 71:33]
    reg r_AW_PROT : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Main.scala 72:33]
    reg r_transaction_cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Main.scala 73:40]
    reg r_W_DATA : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Main.scala 76:33]
    reg r_W_LAST : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Main.scala 77:33]
    reg r_W_STRB : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Main.scala 78:33]
    reg r_W_VALID : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Main.scala 79:33]
    reg r_B_READY : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Main.scala 82:35]
    reg r_len : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Main.scala 85:32]
    wire write_response_ready : UInt<1> @[Main.scala 86:41]
    write_response_ready <= UInt<1>("h00") @[Main.scala 89:30]
    node _T = not(io.B_RESP) @[Main.scala 90:46]
    node _T_1 = and(io.B_VALID, _T) @[Main.scala 90:44]
    write_response_ready <= _T_1 @[Main.scala 90:30]
    io.TOP_RDATA <= UInt<1>("h00") @[Main.scala 93:23]
    io.AR_BURST <= UInt<1>("h00") @[Main.scala 94:23]
    io.AR_ADDR <= UInt<1>("h00") @[Main.scala 95:23]
    io.AR_LEN <= UInt<1>("h00") @[Main.scala 96:23]
    io.AR_SIZE <= UInt<1>("h00") @[Main.scala 97:23]
    io.AR_ID <= UInt<1>("h00") @[Main.scala 98:23]
    io.AR_VALID <= UInt<1>("h00") @[Main.scala 99:23]
    io.AR_PROT <= UInt<1>("h00") @[Main.scala 100:23]
    io.R_READY <= UInt<1>("h00") @[Main.scala 101:23]
    reg state : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[Main.scala 108:28]
    node _T_2 = asUInt(UInt<1>("h00")) @[Conditional.scala 37:23]
    node _T_3 = asUInt(state) @[Conditional.scala 37:39]
    node _T_4 = eq(_T_2, _T_3) @[Conditional.scala 37:30]
    when _T_4 : @[Conditional.scala 40:58]
      node _T_5 = eq(io.TOP_WR, UInt<1>("h01")) @[Main.scala 113:32]
      when _T_5 : @[Main.scala 113:41]
        node _T_6 = eq(r_transaction_cnt, UInt<1>("h00")) @[Main.scala 114:45]
        when _T_6 : @[Main.scala 114:53]
          r_B_READY <= UInt<1>("h00") @[Main.scala 116:35]
          r_AW_BURST <= io.TOP_BURST @[Main.scala 117:36]
          r_AW_ADDR <= io.TOP_ADDRESS @[Main.scala 118:36]
          r_AW_LEN <= io.TOP_LENGTH @[Main.scala 119:36]
          r_AW_SIZE <= io.TOP_SIZE @[Main.scala 120:36]
          node _T_7 = dshl(io.TOP_LENGTH, io.TOP_SIZE) @[Main.scala 121:55]
          node _T_8 = add(_T_7, UInt<1>("h01")) @[Main.scala 121:72]
          node _T_9 = tail(_T_8, 1) @[Main.scala 121:72]
          r_len <= _T_9 @[Main.scala 121:36]
          r_AW_VALID <= UInt<1>("h01") @[Main.scala 122:36]
          r_W_VALID <= UInt<1>("h01") @[Main.scala 123:36]
          r_AW_ID <= UInt<1>("h00") @[Main.scala 124:36]
          r_AW_PROT <= UInt<1>("h00") @[Main.scala 125:36]
          node _T_10 = eq(io.AW_READY, UInt<1>("h01")) @[Main.scala 126:43]
          when _T_10 : @[Main.scala 126:51]
            r_transaction_cnt <= UInt<1>("h00") @[Main.scala 127:47]
            state <= UInt<1>("h01") @[Main.scala 128:35]
            r_AW_VALID <= UInt<1>("h00") @[Main.scala 129:40]
            skip @[Main.scala 126:51]
          else : @[Main.scala 130:38]
            node _T_11 = add(r_transaction_cnt, UInt<1>("h01")) @[Main.scala 131:68]
            node _T_12 = tail(_T_11, 1) @[Main.scala 131:68]
            r_transaction_cnt <= _T_12 @[Main.scala 131:47]
            skip @[Main.scala 130:38]
          skip @[Main.scala 114:53]
        else : @[Main.scala 133:34]
          node _T_13 = eq(io.AW_READY, UInt<1>("h01")) @[Main.scala 134:43]
          when _T_13 : @[Main.scala 134:51]
            r_transaction_cnt <= UInt<1>("h00") @[Main.scala 135:47]
            r_AW_VALID <= UInt<1>("h00") @[Main.scala 136:40]
            state <= UInt<1>("h01") @[Main.scala 137:35]
            skip @[Main.scala 134:51]
          else : @[Main.scala 138:38]
            r_AW_BURST <= r_AW_BURST @[Main.scala 140:40]
            r_AW_ADDR <= r_AW_ADDR @[Main.scala 141:40]
            r_AW_LEN <= r_AW_LEN @[Main.scala 142:40]
            r_AW_SIZE <= r_AW_SIZE @[Main.scala 143:40]
            r_AW_VALID <= UInt<1>("h01") @[Main.scala 144:40]
            r_AW_ID <= UInt<1>("h00") @[Main.scala 145:40]
            r_AW_PROT <= UInt<1>("h00") @[Main.scala 146:40]
            node _T_14 = add(r_transaction_cnt, UInt<1>("h01")) @[Main.scala 147:68]
            node _T_15 = tail(_T_14, 1) @[Main.scala 147:68]
            r_transaction_cnt <= _T_15 @[Main.scala 147:47]
            skip @[Main.scala 138:38]
          skip @[Main.scala 133:34]
        skip @[Main.scala 113:41]
      else : @[Main.scala 150:30]
        state <= UInt<1>("h00") @[Main.scala 151:27]
        skip @[Main.scala 150:30]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_16 = asUInt(UInt<1>("h01")) @[Conditional.scala 37:23]
      node _T_17 = asUInt(state) @[Conditional.scala 37:39]
      node _T_18 = eq(_T_16, _T_17) @[Conditional.scala 37:30]
      when _T_18 : @[Conditional.scala 39:67]
        node _T_19 = eq(io.W_READY, UInt<1>("h01")) @[Main.scala 155:33]
        when _T_19 : @[Main.scala 155:42]
          node _T_20 = geq(r_len, UInt<1>("h01")) @[Main.scala 156:33]
          when _T_20 : @[Main.scala 156:41]
            node _T_21 = sub(r_len, UInt<1>("h01")) @[Main.scala 157:45]
            node _T_22 = tail(_T_21, 1) @[Main.scala 157:45]
            r_len <= _T_22 @[Main.scala 157:36]
            r_W_STRB <= UInt<1>("h01") @[Main.scala 158:36]
            r_W_DATA <= io.TOP_WDATA @[Main.scala 159:36]
            state <= UInt<1>("h01") @[Main.scala 160:36]
            node _T_23 = geq(r_len, UInt<1>("h01")) @[Main.scala 161:37]
            when _T_23 : @[Main.scala 161:44]
              r_W_LAST <= UInt<1>("h01") @[Main.scala 162:40]
              skip @[Main.scala 161:44]
            skip @[Main.scala 156:41]
          else : @[Main.scala 164:34]
            state <= UInt<2>("h02") @[Main.scala 165:31]
            r_W_LAST <= UInt<1>("h00") @[Main.scala 166:35]
            r_W_DATA <= UInt<1>("h00") @[Main.scala 167:36]
            r_W_STRB <= UInt<1>("h00") @[Main.scala 168:36]
            r_W_VALID <= UInt<1>("h00") @[Main.scala 169:36]
            skip @[Main.scala 164:34]
          skip @[Main.scala 155:42]
        else : @[Main.scala 171:30]
          r_W_DATA <= r_W_DATA @[Main.scala 172:32]
          r_W_LAST <= r_W_LAST @[Main.scala 173:32]
          r_W_STRB <= r_W_STRB @[Main.scala 174:32]
          r_W_VALID <= r_W_VALID @[Main.scala 175:32]
          state <= UInt<1>("h01") @[Main.scala 176:27]
          skip @[Main.scala 171:30]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_24 = asUInt(UInt<2>("h02")) @[Conditional.scala 37:23]
        node _T_25 = asUInt(state) @[Conditional.scala 37:39]
        node _T_26 = eq(_T_24, _T_25) @[Conditional.scala 37:30]
        when _T_26 : @[Conditional.scala 39:67]
          r_B_READY <= UInt<1>("h01") @[Main.scala 180:27]
          node _T_27 = eq(write_response_ready, UInt<1>("h01")) @[Main.scala 181:44]
          when _T_27 : @[Main.scala 181:53]
            state <= UInt<1>("h00") @[Main.scala 182:31]
            skip @[Main.scala 181:53]
          skip @[Conditional.scala 39:67]
    io.AW_BURST <= r_AW_BURST @[Main.scala 190:21]
    io.AW_ADDR <= r_AW_ADDR @[Main.scala 191:21]
    io.AW_LEN <= r_AW_LEN @[Main.scala 192:21]
    io.AW_SIZE <= r_AW_SIZE @[Main.scala 193:21]
    io.AW_ID <= r_AW_ID @[Main.scala 194:21]
    io.AW_VALID <= r_AW_VALID @[Main.scala 195:21]
    io.AW_PROT <= r_AW_PROT @[Main.scala 196:21]
    io.W_DATA <= r_W_DATA @[Main.scala 199:21]
    io.W_LAST <= r_W_LAST @[Main.scala 200:21]
    io.W_STRB <= r_W_STRB @[Main.scala 201:21]
    io.W_VALID <= r_W_VALID @[Main.scala 202:21]
    io.B_READY <= r_B_READY @[Main.scala 205:21]
    
