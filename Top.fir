;buildInfoPackage: chisel3, version: 3.3.1, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit Top : 
  module Transmitter : 
    input clock : Clock
    input reset : Reset
    output io : {flip START : UInt<1>, WR : UInt<1>, RD : UInt<1>, ADD : UInt<32>, WDATA : UInt<32>, flip RDATA : UInt<32>}
    
    reg r_start : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[fsm_comm.scala 24:30]
    reg r_wr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[fsm_comm.scala 25:30]
    reg r_rd : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[fsm_comm.scala 26:30]
    reg r_add : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[fsm_comm.scala 27:30]
    reg r_wdata : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[fsm_comm.scala 28:30]
    reg r_rdata : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[fsm_comm.scala 29:30]
    reg state : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[fsm_comm.scala 35:28]
    node _T = asUInt(UInt<1>("h00")) @[Conditional.scala 37:23]
    node _T_1 = asUInt(state) @[Conditional.scala 37:39]
    node _T_2 = eq(_T, _T_1) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      node _T_3 = eq(r_start, UInt<1>("h01")) @[fsm_comm.scala 39:30]
      when _T_3 : @[fsm_comm.scala 39:39]
        state <= UInt<1>("h01") @[fsm_comm.scala 40:27]
        skip @[fsm_comm.scala 39:39]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = asUInt(UInt<1>("h01")) @[Conditional.scala 37:23]
      node _T_5 = asUInt(state) @[Conditional.scala 37:39]
      node _T_6 = eq(_T_4, _T_5) @[Conditional.scala 37:30]
      when _T_6 : @[Conditional.scala 39:67]
        r_wr <= UInt<1>("h01") @[fsm_comm.scala 44:22]
        r_rd <= UInt<1>("h00") @[fsm_comm.scala 45:22]
        r_add <= UInt<5>("h01e") @[fsm_comm.scala 46:23]
        r_wdata <= UInt<5>("h014") @[fsm_comm.scala 47:25]
        state <= UInt<2>("h02") @[fsm_comm.scala 48:23]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = asUInt(UInt<2>("h02")) @[Conditional.scala 37:23]
        node _T_8 = asUInt(state) @[Conditional.scala 37:39]
        node _T_9 = eq(_T_7, _T_8) @[Conditional.scala 37:30]
        when _T_9 : @[Conditional.scala 39:67]
          r_add <= UInt<5>("h01f") @[fsm_comm.scala 51:23]
          r_wdata <= UInt<5>("h016") @[fsm_comm.scala 52:25]
          state <= UInt<2>("h03") @[fsm_comm.scala 53:23]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_10 = asUInt(UInt<2>("h03")) @[Conditional.scala 37:23]
          node _T_11 = asUInt(state) @[Conditional.scala 37:39]
          node _T_12 = eq(_T_10, _T_11) @[Conditional.scala 37:30]
          when _T_12 : @[Conditional.scala 39:67]
            r_wr <= UInt<1>("h00") @[fsm_comm.scala 56:22]
            r_rd <= UInt<1>("h00") @[fsm_comm.scala 57:22]
            r_add <= UInt<1>("h00") @[fsm_comm.scala 58:23]
            r_wdata <= UInt<1>("h00") @[fsm_comm.scala 59:25]
            skip @[Conditional.scala 39:67]
    r_start <= io.START @[fsm_comm.scala 64:17]
    io.WR <= r_wr @[fsm_comm.scala 65:15]
    io.RD <= r_rd @[fsm_comm.scala 66:15]
    io.ADD <= r_add @[fsm_comm.scala 67:16]
    io.WDATA <= r_wdata @[fsm_comm.scala 68:18]
    r_rdata <= io.RDATA @[fsm_comm.scala 69:17]
    
  module Receiver : 
    input clock : Clock
    input reset : Reset
    output io : {flip WR : UInt<1>, flip RD : UInt<1>, flip ADD : UInt<32>, flip WDATA : UInt<32>, RDATA : UInt<32>, CDATA : UInt<32>}
    
    reg r_wr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[fsm_comm.scala 85:30]
    reg r_rd : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[fsm_comm.scala 86:30]
    reg r_add : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[fsm_comm.scala 87:30]
    reg r_wdata : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[fsm_comm.scala 88:30]
    reg r_rdata : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[fsm_comm.scala 89:30]
    reg r_cdata : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[fsm_comm.scala 90:30]
    reg state : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[fsm_comm.scala 97:28]
    node _T = asUInt(UInt<1>("h00")) @[Conditional.scala 37:23]
    node _T_1 = asUInt(state) @[Conditional.scala 37:39]
    node _T_2 = eq(_T, _T_1) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      node _T_3 = eq(r_wr, UInt<1>("h01")) @[fsm_comm.scala 101:27]
      when _T_3 : @[fsm_comm.scala 101:36]
        node _T_4 = eq(r_add, UInt<5>("h01e")) @[fsm_comm.scala 102:32]
        when _T_4 : @[fsm_comm.scala 102:42]
          r_cdata <= r_wdata @[fsm_comm.scala 103:33]
          state <= UInt<1>("h01") @[fsm_comm.scala 104:27]
          skip @[fsm_comm.scala 102:42]
        skip @[fsm_comm.scala 101:36]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_5 = asUInt(UInt<1>("h01")) @[Conditional.scala 37:23]
      node _T_6 = asUInt(state) @[Conditional.scala 37:39]
      node _T_7 = eq(_T_5, _T_6) @[Conditional.scala 37:30]
      when _T_7 : @[Conditional.scala 39:67]
        node _T_8 = eq(r_wr, UInt<1>("h01")) @[fsm_comm.scala 109:27]
        when _T_8 : @[fsm_comm.scala 109:36]
          node _T_9 = eq(r_add, UInt<5>("h01f")) @[fsm_comm.scala 110:32]
          when _T_9 : @[fsm_comm.scala 110:42]
            r_cdata <= r_wdata @[fsm_comm.scala 111:29]
            state <= UInt<2>("h02") @[fsm_comm.scala 112:27]
            skip @[fsm_comm.scala 110:42]
          skip @[fsm_comm.scala 109:36]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_10 = asUInt(UInt<2>("h02")) @[Conditional.scala 37:23]
        node _T_11 = asUInt(state) @[Conditional.scala 37:39]
        node _T_12 = eq(_T_10, _T_11) @[Conditional.scala 37:30]
        when _T_12 : @[Conditional.scala 39:67]
          r_cdata <= UInt<1>("h00") @[fsm_comm.scala 117:25]
          skip @[Conditional.scala 39:67]
    r_wr <= io.WR @[fsm_comm.scala 122:14]
    r_rd <= io.RD @[fsm_comm.scala 123:14]
    r_add <= io.ADD @[fsm_comm.scala 124:15]
    r_wdata <= io.WDATA @[fsm_comm.scala 125:17]
    io.RDATA <= r_rdata @[fsm_comm.scala 126:18]
    io.CDATA <= r_cdata @[fsm_comm.scala 127:18]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip start : UInt<1>, cdata_check : UInt<32>}
    
    inst Tx of Transmitter @[fsm_comm.scala 139:24]
    Tx.clock <= clock
    Tx.reset <= reset
    inst Rx of Receiver @[fsm_comm.scala 140:24]
    Rx.clock <= clock
    Rx.reset <= reset
    Rx.io.WR <= Tx.io.WR @[fsm_comm.scala 144:18]
    Rx.io.RD <= Tx.io.RD @[fsm_comm.scala 145:18]
    Rx.io.ADD <= Tx.io.ADD @[fsm_comm.scala 146:19]
    Rx.io.WDATA <= Tx.io.WDATA @[fsm_comm.scala 147:21]
    Tx.io.RDATA <= Rx.io.RDATA @[fsm_comm.scala 148:21]
    Tx.io.START <= io.start @[fsm_comm.scala 149:21]
    io.cdata_check <= Rx.io.CDATA @[fsm_comm.scala 152:24]
    
